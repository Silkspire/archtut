#create 512M partition: type ef00 (efi)
#create 2nd partition for rest of Linux
cfdisk /dev/sdX
#build FAT32
mkfs.fat -F32 /dev/sdX1
#build ext4 on other
mkfs.ext4 /dev/sdX2
#mount the large ext4 partition
mount /dev/sdX2 /mnt
#make boot directory
mkdir /mnt/boot
#mount efi partition to boot directory
mount /dev/sdX1 /mnt/boot
#install base system (takes a bit)
pacstrap /mnt base base-devel
#generate fstab
genfstab -U /mnt > /mnt/etc/fstab

#here is where you would install a bootloader, but fuck that
#UEFI is magical
#pass intel_iommu=on for passthrough
#pass intel microcode
#probably wanna chroot and install intel-ucode package before, I dunno.

efibootmgr -d /dev/sdX -p 1 -c -L "Arch Linux" -l /vmlinuz-linux -u "root=/dev/sdX2 rw initrd=/intel-ucode.img initrd=initramfs-linux.img intel_iommu=on"
#remove bootable media, restart.
reboot

#login as root, set root password
passwd
#set hostname
echo hostnameYouWant > /etc/hostname
#add new user & set password
useradd -m -G wheel -g users usernameYouWant
passwd usernameYouWant
#edit sudoers to allow new user to sudo
EDITOR=nano visudo
    ##Uncomment to allow memebers of group..
    %wheel ALL=(ALL) ALL

#check name of network interface
ip link

###Shitty dynamic IP settings on startup as daemon, don't use if advanced
###systemctl enable dhcpcd@{NETINTERFACENAME}.service (enp#s#)
###systemctl start dhcpcd@{NETINTERFACENAME}.service (enp#s#)

#generate new locales & set one system wide
uncomment en_US.UTF-8 in /etc/locale.gen
locale-gen
#write LANG=en_US.UTF-8 to /etc/locale.conf
#write KEYMAP=de-latin1 to /etc/vconsole.conf
localectl set-locale LANG=en_US.UTF-8
#selectt timezone and set it permanent
tzselect
timedatectl set-timezone 'Europe/City'
#set hardware clock and sync using ntp
hwclock --systohc --utc
timedatectl set-ntp true

###swap file if you want
###fallocate -l 2G /swapfile
###chmod 600 /swapfile
###mkswap /swapfile
###nano /etc/fstab  (/swapfile none swap defaults 0 0)
###nano /etc/sysctl.d/99-sysctl.conf (vm.swappiness=10)

#enable color and x86 repo in pacman.conf
nano /etc/pacman.conf
  # Misc options
  Color
  [multilib]
  Include = /etc/pacman.d/mirrorlist
 #also add archlinuxfr repo FOR AUR USE I GUESS
 [archlinuxfr]
 SigLevel = Never
 Server = http://repo.archlinux.fr/$arch

#sync repos and reboot
#start internet for this

#systemctl start dhcpcd@{NETINTERFACENAME}.service (enp#s#)
pacman -Sy
reboot

#login as normal user, sudo everything
#install yaourt to be able to use AUR packages
pacman -S yaourt
#install default video driver
pacman - S xf86-video-vesa
#install OpenGL support
pacman -S mesa
#install video driver ospecific for your hardware
pacman -S xf86-video-intel lib32-mesa-libgl
#install Xorg packages
pacman -S xorg-server xorg-utils xorg-xinit

#install DE of choice (pacman -S)
Xfce      xfce4 xfce4-goodies
GNOME     gnome gnome-extra
KDE       plasma kde-applications
Cinnamon  cinnamon
MATE      mate mate-extra
LXDE      lxde
LXQt      lxqt

#install & enable login manager
#GDM (gnome)
  pacman -S GDM
  systemctl enable gdm.service
#LightDM
  pacman -S lightdm-gtk-greeter
  systemctl enable lightdm.service

#install guake before booting into broken gnome-terminal
#afterwards go to Tweaks -> Startup Applications and add it there
#chroot first, I guess
pacman -S guake

reboot




#add to hosts: 127.0.0.1	YourHostname.localdomain	YourHostname
nano /etc/hosts

#use NetworkManager for internet connection
pacman -S NetworkManager
systemctl enable NetworkManager.service
systemctl start NetworkManager.service



#install Chromium or whatever
pacman -S chromium
#chrome://flags look for smooth scrolling, disable it.
#get ublock origin

#install zsh, switch shell for user
pacman -S zsh
chsh -s /bin/zsh USER

#install mpv, transmission, sublime
pacman -S mpv transmission-gtk

# git gud
git clone https://github.com/Silkspire/archtut Where/You/Want/To/Put/It
git add .
git commit -m "Comments"
git push

#mount additional drives, shit is weird, octal permissions are backwards for some fuckign reason
#make sure you have ntfs-3g installed ffs
#edit /etc/fstab, insert:
/dev/sdc1 /home/silk/Data ntfs-3g defaults,auto,gid=1000,uid=1000,umask=000 0 0

#setup sublime
#download sublime from website, unarchive, move to /usr/bin, make symbolic link for term access
tar -j -x -f the_archive_name.bzip2
rm the_archive_name.bzip2
sudo mv sublime_text /usr/bin/
sudo ln -s /usr/bin/sublime_text/sublime_text /usr/local/bin/sublime
#now to add to 'open with' list
nano ~/.local/share/applications/sublime.desktop
		[Desktop Entry]
		Name=sublime3
		GenericName=Sublime3 - IDE
		Comment=Edit text files
		Exec=/usr/local/bin/sublime %U
		Terminal=false
		Type=Application
		StartupNotify=true
		MimeType=text/plain;
		Icon=/usr/bin/sublime_text_3/Icon/256x256/sublime_text.png
		Categories=GNOME;GTK;Utility;TextEditor;
		X-GNOME-DocPath=gedit/gedit.xml
		X-GNOME-FullName=Sublime3
		X-GNOME-Bugzilla-Bugzilla=GNOME
		X-GNOME-Bugzilla-Product=gedit
		X-GNOME-Bugzilla-Component=general
		X-GNOME-Bugzilla-Version=3.2.0
		X-GNOME-Bugzilla-ExtraInfoScript=/usr/share/gedit/gedit-bugreport
		X-Ubuntu-Gettext-Domain=gedit

#install mpd and cantata
systemctl enable mpd.socket
systemctl start mpd.socket
nano /etc/mpd.conf 
#write music_directory "~/Data/Music"
#run Cantata, standard user config

#download mpv





### passthrough here
#run this in bash to check IDs of what you want to passthrough (1002:6798 and 1002:aaa0 for me)
shopt -s nullglob
for d in /sys/kernel/iommu_groups/*/devices/*; do 
    n=${d#*/iommu_groups/*}; n=${n%%/*}
    printf 'IOMMU Group %s ' "$n"
    lspci -nns "${d##*/}"
done;

#do this to make sure you have vfio-pci, if not, check pci-stub
modinfo vfio-pci 

#add IDs to default parameters of vfio-pci
/etc/modprobe.d/vfio.conf
options vfio-pci ids=1002:6798,1002:aaa0

#add these to /etc/mkinitcpio.conf MAKE SURE IT'S CPIO NOT PCIO FFS
MODULES="... vfio vfio_iommu_type1 vfio_pci vfio_virqfd ..."
HOOKS="... modconf ..."

#regenerate initramfs
mkinitcpio -p linux

#reboot, stuff might be broken anyway
#make sure vfio-pci loaded properly
dmesg | grep -i vfio
[    0.329224] VFIO - User Level meta-driver version: 0.3
[    0.341372] vfio_pci: add [10de:13c2[ffff:ffff]] class 0x000000/00000000
[    0.354704] vfio_pci: add [10de:0fbb[ffff:ffff]] class 0x000000/00000000
[    2.061326] vfio-pci 0000:06:00.0: enabling device (0100 -> 0103)

#install qemu, libvirt, virt-manager
pacman -S qemu, libvirt, virt-manager
#install ovmf-git(AUR), edit nothing, continue, continue with your pass
yaourt -S ovmf-git

#edit /etc/libvirt/qemu.conf
#leave commented out nvram there, insert this separately! CHECK HERE FOR DOMAINS MAYBE
nvram = [
	"/usr/share/ovmf/x64/ovmf_x64.bin:/usr/share/ovmf/x64/ovmf_vars_x64.bin"
]

#enable and start libvirtd and its logging component
# systemctl enable --now libvirtd
# systemctl enable virtlogd.socket

#now install VM
virt-manager
create new virtual machine
from iso (browse local)
assign cpus and ram (not max RAM, shit can break)
check "Customize configuration before install"
leave network as host device for now, configure NAT later

On customize screen, set firmware as UEFI
Set CPU model as "host-passthrough" (write it in if you don't have it there)

###CHECK THIS LATER MAYBE I DUNNO
If you want to minimize IO overhead, go into "Add Hardware" and add a Controller for SCSI drives of the "VirtIO SCSI" model. You can then change the default IDE disk for a SCSI disk, which will bind to said controller.
Windows VMs will not recognize those drives by default, so you need to download the ISO containing the drivers from here and add an IDE (or SATA for Windows 8.1 and newer) CD-ROM storage device linking to said ISO, otherwise you will not be able to get Windows to recognize it during the installation process. When prompted to select a disk to install windows on, load the drivers contained on the CD-ROM under vioscsi.
###########################################

#Begin installation
#install os
#after that's done, shut it down
#edit hardware details, remove all unneeded devices
spice channel, virtual display, qxl video adapter, emulated mouse and keyboard, tablet device.
add mouse and/or keyboard to it
add hardware -> PCI Host Devices -> your GPU

#to make nat, install ebtables, firewalld and dnsmasq
systemctl start firewalld
systemctl enable firewalld
systemctl restart libvirtd

#right-click QEMU/KVM in virt-manager > details > press + > name it something
#Network : 192.168.1.0/24
#192.168.1.128 - to same
#Forwarding to physical network ANY > NAT > FINISH
#mark as autostart if needed

#install synergy on client and server
#server is the VM
#client is the linux

On client, server ip: 192.168.1.128

### AUDIO ALTERNATIVE USING qemu-system-x86_64 or whatever the fuck
### AUDIO EMULATION:
To hear the sound from the vm on your host speakers you'll need to add this lines:
-soundhw hda
You might need to start qemu like this:
QEMU_PA_SAMPLES=128 QEMU_AUDIO_DRV=pa qemu-system-x86_64...
alsa:
QEMU_ALSA_DAC_BUFFER_SIZE=512 QEMU_ALSA_DAC_PERIOD_SIZE=170 QEMU_AUDIO_DRV=alsa qemu-system-x86_64...
Note: these are the settings i found that work great on my system, if you get crackling/skipping audio you might want to try different settings
To see the available drivers and audio options:
qemu-system-x86_64 -audio-help
#####################################



#audio solution practically (there might be an issue with permissions, I dunno)
#VM configuration seems broken, need to remake vm
cd /etc/libvirt/qemu/win10.xml
cp win10.xml new_vm_name.xml
edit /etc/libvirt/qemu/new_vm_name.xml

change
<domain type='kvm'>
to
<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>

on the bottom, change
   </devices>
    </domain>
to
 </devices>
      <qemu:commandline>
        <qemu:env name='QEMU_AUDIO_DRV' value='pa'/>
        <qemu:env name='QEMU_PA_SERVER' value='/run/user/1000/pulse/native'/>   (assuming your userid is 1000)
      </qemu:commandline>
 </domain>

virsh
define new_vm_name.xml
# then restart libvirt and pulseaudio to make audio work
 systemctl restart libvirtd
 pulseaudio --kill
 pulseaudio --start

#make sure you have Speakers set as Default Audio Device in Windows

#next up, to fix crackle:
###"The application pavucontrol can be used to control the output device.
###Be aware that on Windows guests, this can cause audio crackling without using Message-Signaled Interrupts."



















#audio solution theoretically
sudo EDITOR=nano virsh edit VMNAME (win10 in my case)
###if not, edit /etc/libvirt/qemu/win10.xml
change
<domain type='kvm'>
to
<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>

on the bottom, change
   </devices>
    </domain>
to
 </devices>
      <qemu:commandline>
        <qemu:env name='QEMU_AUDIO_DRV' value='pa'/>
        <qemu:env name='QEMU_PA_SERVER' value='/run/user/1000/pulse/native'/>   (assuming your userid is 1000)
      </qemu:commandline>
 </domain>

 # then restart libvirt and pulseaudio to make audio work
 systemctl restart libvirtd
 pulseaudio --kill
 pulseaudio --start

#make sure you have Speakers set as Default Audio Device in Windows